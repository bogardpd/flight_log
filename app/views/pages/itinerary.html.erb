<%

# Data:
@time_zone = "Mountain Standard Time"

@incoming_flights = Array.new
@returning_flights = Array.new

@incoming_flights.push(["Cap Blackard",[
	["WN", 3500, "SAN", "2015-07-12 18:10", "TUS", "2015-07-12 19:20"]
],true])
@incoming_flights.push(["Jon Kay",[
	["US", 622,  "LAX", "2015-07-15 11:25", "PHX", "2015-07-15 14:01"]
],true])
@incoming_flights.push(["Brian Jaworski",[
	["US", 1881, "PHL", "2015-07-15 15:15", "PHX", "2015-07-15 20:27"],
	["US", 5578, "PHX", "2015-07-15 21:45", "TUS", "2015-07-15 22:27"]
],true])
@incoming_flights.push(["Ann Kornuta",[
	["AC", 1837, "YYZ", "2015-07-16 07:15", "PHX", "2015-07-16 11:51"]
],false])
@incoming_flights.push(["Jon Magram",[
	["WN", 3496, "LAX", "2015-07-16 13:25", "TUS", "2015-07-16 14:50"]
],true])
@incoming_flights.push(["Robert Krakower",[
	["WN", 3496, "LAX", "2015-07-16 13:25", "TUS", "2015-07-16 14:50"]
],true])
@incoming_flights.push(["Eric Benson",[
	["WN", 3500, "SAN", "2015-07-16 18:10", "TUS", "2015-07-16 19:20"]
],true])
@incoming_flights.push(["Chris Warriner",[
	["AA", 5722, "HSV", "2015-07-16 11:44", "DFW", "2015-07-16 13:50"],
	["AA", 81,   "DFW", "2015-07-16 17:35", "TUS", "2015-07-16 19:42"]
],true])
@incoming_flights.push(["Adil Mohyuddin",[
	["AA", 354,  "ORD", "2015-07-16 18:10", "TUS", "2015-07-16 21:52"]
],true])
@incoming_flights.push(["Tyler Shaw",[
	["AA", 610,  "SFO", "2015-07-17 06:00", "PHX", "2015-07-17 08:02"]
],false])
@incoming_flights.push(["Paul Bogard",[
	["AA", 2372, "CMH", "2015-07-17 03:10", "DFW", "2015-07-17 05:49"],
	["AA", 1346, "DFW", "2015-07-17 06:50", "TUS", "2015-07-17 09:08"]
],false])
@incoming_flights.push(["Andrew Allanson",[
	["AA", 1008, "EWR", "2015-07-17 04:03", "DFW", "2015-07-17 07:45"],
	["AA", 1079, "DFW", "2015-07-17 08:40", "TUS", "2015-07-17 11:01"]
],true])
@incoming_flights.push(["Brian Allanson",[
	["AA", 1008, "EWR", "2015-07-17 04:03", "DFW", "2015-07-17 07:45"],
	["AA", 1079, "DFW", "2015-07-17 08:40", "TUS", "2015-07-17 11:01"]
],true])
@incoming_flights.push(["David Welch",[
	["AA", 1507, "ORD", "2015-07-17 08:14", "TUS", "2015-07-17 11:45"]
],true])
@incoming_flights.push(["Joey DeSena",[
	["DL", 1240, "ATL", "2015-07-17 08:43", "TUS", "2015-07-17 12:24"]
],true])
@incoming_flights.push(["TomBob Blender",[
	["F9", 1358, "SFO", "2015-07-17 16:45", "PHX", "2015-07-17 18:40"]
],true])

@returning_flights.push(["David Welch",[
	["AA", 1636, "TUS", "2015-07-19 12:06", "ORD", "2015-07-19 15:24"]
],true])
@returning_flights.push(["Joey DeSena",[
	["AA", 2888, "TUS", "2015-07-19 17:37", "LAX", "2015-07-19 19:15"]
],true])
@returning_flights.push(["Cap Blackard",[
	["WN", 1374, "TUS", "2015-07-20 07:00", "MDW", "2015-07-20 10:20"]
],true])
@returning_flights.push(["Andrew Allanson",[
	["AA", 2954, "TUS", "2015-07-20 13:00", "DFW", "2015-07-20 15:22"],
	["AA", 1662, "DFW", "2015-07-20 16:26", "EWR", "2015-07-20 20:00"]
],true])
@returning_flights.push(["Brian Allanson",[
	["AA", 2954, "TUS", "2015-07-20 13:00", "DFW", "2015-07-20 15:22"],
	["AA", 1662, "DFW", "2015-07-20 16:26", "EWR", "2015-07-20 20:00"]
],true])
@returning_flights.push(["Brian Jaworski",[
	["AA", 2954, "TUS", "2015-07-20 13:30", "PHX", "2015-07-20 14:16"],
	["AA", 1712, "PHX", "2015-07-20 14:45", "PHL", "2015-07-20 19:19"]
],true])
@returning_flights.push(["Tyler Shaw",[
	["AA", 407,  "PHX", "2015-07-20 13:55", "SFO", "2015-07-20 15:59"]
],false])
@returning_flights.push(["TomBob Blender",[
	["F9", 1358, "PHX", "2015-07-20 15:50", "SFO", "2015-07-20 17:45"]
],true])
@returning_flights.push(["Ann Kornuta",[
	["AC", 4000, "PHX", "2015-07-20 18:31", "SFO", "2015-07-20 20:35"],
	["AC", 754,  "SFO", "2015-07-20 22:35", "YYZ", "2015-07-21 03:35"]
],false])
@returning_flights.push(["Jon Magram",[
	["WN", 3144, "TUS", "2015-07-20 19:55", "LAX", "2015-07-20 21:25"]
],true])
@returning_flights.push(["Robert Krakower",[
	["WN", 3144, "TUS", "2015-07-20 19:55", "LAX", "2015-07-20 21:25"]
],true])
@returning_flights.push(["Paul Bogard",[
	["UA", 6369, "TUS", "2015-07-21 07:31", "SFO", "2015-07-21 09:49"],
	["UA", 567,  "SFO", "2015-07-21 10:50", "YVR", "2015-07-21 13:07"]
],false])
@returning_flights.push(["Eric Benson",[
	["WN", 2054, "TUS", "2015-07-21 14:00", "LAS", "2015-07-21 15:15"]
],true])
@returning_flights.push(["Jon Kay",[
	["WN", 2054, "TUS", "2015-07-21 18:10", "PHX", "2015-07-21 19:41"]
],true])

# Settable:
@row_hue = Hash.new
@row_hue["TUS"] = 0
@row_hue["PHX"] = 180

@lightness_ff_lt = '40%' # Flight fill, layover text
@lightness_lf_ft = '80%' # Layover fill, flight text
@lightness_stroke = '30%'
@saturation = '50%'

@airport_padding = 3
@airport_right_buffer = 48
@arrow_point_length = 5
@flight_bar_height = 30
@flight_bar_spacing = 5
@flight_bar_line_break_width = 40
@image_padding = 10
@name_width = 130
@name_padding = 10
@pixels_per_hour = 40
@time_label_height = 18
@time_label_padding = 5


# Derived:

@image_width = @name_width + (24*@pixels_per_hour) + 2*@image_padding + @time_label_padding + @airport_right_buffer
@chart_top = @image_padding + (2 * @time_label_height) + @time_label_padding
@chart_left = @image_padding + @name_width
@chart_right = @chart_left + (24 * @pixels_per_hour)

def draw_charts
	# Determine earliest and latest dates
	incoming_date_range = [nil,nil];
	returning_date_range = [nil,nil];
	
	@incoming_flights.each do |person|
		person[1].each do |flight|
			if (incoming_date_range[0].nil? || Date.parse(flight[3]) < incoming_date_range[0])
				incoming_date_range[0] = Date.parse(flight[3])
			end
			if (incoming_date_range[1].nil? || Date.parse(flight[5]) > incoming_date_range[1])
				incoming_date_range[1] = Date.parse(flight[5])
			end
		end
	end
	
	@returning_flights.each do |person|
		person[1].each do |flight|
			if (returning_date_range[0].nil? || Date.parse(flight[3]) < returning_date_range[0])
				returning_date_range[0] = Date.parse(flight[3])
			end
			if (returning_date_range[1].nil? || Date.parse(flight[5]) > returning_date_range[1])
				returning_date_range[1] = Date.parse(flight[5])
			end
		end
	end
	
	concat "<h2>Incoming Flights</h2>\n".html_safe
	
	for d in incoming_date_range[0]..incoming_date_range[1]
		draw_date_chart(d,@incoming_flights,true)
	end
	
	concat "<h2>Returning Flights</h2>\n".html_safe
	
	for d in returning_date_range[0]..returning_date_range[1]
		draw_date_chart(d,@returning_flights,false)
	end
end


def draw_date_chart(date, flight_array, arriving)
	
	this_date = date
	
	# Determine number of rows:
	number_of_rows = 0
	flight_array.each do |person|
		contains_flight_with_current_date = false
		person[1].each do |flight|
			if (Date.parse(flight[3]) == this_date || Date.parse(flight[5]) == this_date)
				contains_flight_with_current_date = true 
			end
		end
		number_of_rows += 1 if contains_flight_with_current_date
	end
	
	if number_of_rows > 0
	
		chart_height = (@flight_bar_height + 2 * @flight_bar_spacing) * number_of_rows
		image_height = @chart_top + chart_height + @image_padding

		concat "<svg width=\"#{@image_width}\" height=\"#{image_height}\">\n\n".html_safe
		concat "<rect width=\"#{@image_width}\" height=\"#{image_height}\" class=\"svg_background\" />\n".html_safe
	
		concat "<text x=\"#{@image_padding}\" y=\"#{@image_padding}\" class=\"svg_time_date_label\">#{this_date.strftime("%A, %B %-d, %Y")}</text>\n".html_safe
		concat "<text x=\"#{@image_padding + @name_width + (12 * @pixels_per_hour)}\" y=\"#{@image_padding +  @time_label_height}\" text-anchor=\"middle\" class=\"svg_time_zone_label\">#{@time_zone}</text>\n".html_safe
	
		# Draw chart grid:
	
		for x in 0..number_of_rows
			concat "<line x1=\"#{@image_padding + @name_width}\" y1=\"#{@chart_top + x * (@flight_bar_height + @flight_bar_spacing * 2)}\" x2=\"#{@image_padding + @name_width + 24 * @pixels_per_hour}\" y2=\"#{@chart_top + x * (@flight_bar_height + @flight_bar_spacing * 2)}\" class=\"svg_gridline_minor\" />\n".html_safe 
		end
	
		for x in 0..24
			concat "<text x=\"#{@image_padding + @name_width + (x * @pixels_per_hour)}\" y=\"#{@chart_top - @time_label_padding}\" text-anchor=\"middle\" class=\"svg_time_label\">#{time_label(x)}</text>\n".html_safe
			concat "<line x1=\"#{@image_padding + @name_width + (x * @pixels_per_hour)}\" y1=\"#{@chart_top}\" x2=\"#{@image_padding + @name_width + (x * @pixels_per_hour)}\" y2=\"#{@chart_top + chart_height + 1}\" class=\"#{x % 12 == 0 ? 'svg_gridline_major' : 'svg_gridline_minor'}\" />\n".html_safe
		end
	
		# Draw flight bars:
		row_index = 0;
		flight_array.each do |person|
			# Make sure this person has flights on this date, and if so, draw a row for them:
			unless Date.parse((person[1].last)[5]) < this_date || Date.parse((person[1].first)[3]) > this_date
				# Get hue:
				if arriving
					this_hue = @row_hue[((person[1].last)[4])]
				else
					this_hue = @row_hue[((person[1].first)[2])]
				end
			
				draw_person_row(person, this_date, row_index, this_hue)
				row_index += 1
			end
		
		end
	
		concat "</svg>\n".html_safe

	end
end

def draw_flight_bar(row, hue, flight, this_date)
	display_flight_number = true
	start_time = DateTime.parse(flight[3])
	end_time = DateTime.parse(flight[5])
	left_side = @name_width + @image_padding + (start_time.hour*@pixels_per_hour) + (start_time.minute*@pixels_per_hour/60)
	right_side = @name_width + @image_padding + (end_time.hour*@pixels_per_hour) + (end_time.minute*@pixels_per_hour/60)
	width = right_side - left_side
	html = ""
	if Date.parse(flight[3]) == this_date && Date.parse(flight[5]) == this_date
		# Flight starts and ends today
		html += "<rect x=\"#{left_side}\" y=\"#{row_top(row)}\" width=\"#{width}\" height=\"#{@flight_bar_height}\" class=\"svg_bar\" fill=\"hsl(#{hue},#{@saturation},#{@lightness_ff_lt})\" stroke=\"hsl(#{hue},#{@saturation},#{@lightness_stroke})\" />\n"
	elsif Date.parse(flight[3]) == this_date && Date.parse(flight[5]) > this_date
		# Flight starts today and ends tomorrow
		html += "<polygon points=\"#{left_side},#{row_top(row)} #{@chart_right},#{row_top(row)} #{@chart_right + @arrow_point_length},#{row_top(row) + @flight_bar_height/2} #{@chart_right},#{row_top(row) + @flight_bar_height} #{left_side},#{row_top(row) + @flight_bar_height}\" class=\"svg_bar\" fill=\"hsl(#{hue},#{@saturation},#{@lightness_ff_lt})\" stroke=\"hsl(#{hue},#{@saturation},#{@lightness_stroke})\" />\n"
		right_side = @chart_right
		width = right_side - left_side
	elsif Date.parse(flight[3]) < this_date && Date.parse(flight[5]) == this_date
		# Flight starts yesterday and ends today
		html += "<polygon points=\"#{@chart_left},#{row_top(row)} #{right_side},#{row_top(row)} #{right_side},#{row_top(row) + @flight_bar_height} #{@chart_left},#{row_top(row) + @flight_bar_height} #{@chart_left - @arrow_point_length},#{row_top(row) + @flight_bar_height/2}\" class=\"svg_bar\" fill=\"hsl(#{hue},#{@saturation},#{@lightness_ff_lt})\" stroke=\"hsl(#{hue},#{@saturation},#{@lightness_stroke})\" />\n"
		left_side = @chart_left
		width = right_side - left_side
	else
		# No part of the flight occurs today, so do not draw anything
		display_flight_number = false
	end
	
	if display_flight_number
		if width < @flight_bar_line_break_width
			html += "<text x=\"#{(left_side + right_side) / 2}\" y=\"#{row_top(row) + @flight_bar_height * 0.3}\" class=\"svg_flight_text\" fill=\"hsl(#{hue},#{@saturation},#{@lightness_lf_ft})\">#{flight[0]}</text>\n"
			html += "<text x=\"#{(left_side + right_side) / 2}\" y=\"#{row_top(row) + @flight_bar_height * 0.7}\" class=\"svg_flight_text\" fill=\"hsl(#{hue},#{@saturation},#{@lightness_lf_ft})\">#{flight[1]}</text>\n"
		else
			html += "<text x=\"#{(left_side + right_side) / 2}\" y=\"#{row_top(row) + @flight_bar_height / 2}\" class=\"svg_flight_text\" fill=\"hsl(#{hue},#{@saturation},#{@lightness_lf_ft})\">#{flight[0]} #{flight[1]}</text>\n"
		end
	end
	html.html_safe
end

def draw_layover_bar(row, hue, flight_1, flight_2, this_date)
	display_layover_airport = true
	html = ""

	start_date = Date.parse(flight_1[5])
	end_date = Date.parse(flight_2[3])
	start_time = DateTime.parse(flight_1[5])
	end_time = DateTime.parse(flight_2[3])
		
	left_side = @name_width + @image_padding + (start_time.hour*@pixels_per_hour) + (start_time.minute*@pixels_per_hour/60)
	right_side = @name_width + @image_padding + (end_time.hour*@pixels_per_hour) + (end_time.minute*@pixels_per_hour/60)
	width = right_side - left_side
	
	if start_date == this_date && end_date == this_date
		# Layover starts and ends today
		html = "<rect x=\"#{left_side}\" y=\"#{row_top(row)}\" width=\"#{width}\" height=\"#{@flight_bar_height}\" class=\"svg_bar\" fill=\"hsl(#{hue},#{@saturation},#{@lightness_lf_ft})\"  stroke=\"hsl(#{hue},#{@saturation},#{@lightness_stroke})\" />\n"
	elsif start_date == this_date && end_date > this_date
		# Layover starts today and ends tomorrow
		html += "<polygon points=\"#{left_side},#{row_top(row)} #{@chart_right},#{row_top(row)} #{@chart_right + @arrow_point_length},#{row_top(row) + @flight_bar_height/2} #{@chart_right},#{row_top(row) + @flight_bar_height} #{left_side},#{row_top(row) + @flight_bar_height}\" class=\"svg_bar\" fill=\"hsl(#{hue},#{@saturation},#{@lightness_lf_ft})\" stroke=\"hsl(#{hue},#{@saturation},#{@lightness_stroke})\" />\n"
		right_side = @chart_right
		width = right_side - left_side
	elsif start_date < this_date && end_date == this_date
		# Layover starts yesterday and ends today
		html += "<polygon points=\"#{@chart_left},#{row_top(row)} #{right_side},#{row_top(row)} #{right_side},#{row_top(row) + @flight_bar_height} #{@chart_left},#{row_top(row) + @flight_bar_height} #{@chart_left - @arrow_point_length},#{row_top(row) + @flight_bar_height/2}\" class=\"svg_bar\" fill=\"hsl(#{hue},#{@saturation},#{@lightness_lf_ft})\" stroke=\"hsl(#{hue},#{@saturation},#{@lightness_stroke})\" />\n"
		left_side = @chart_left
		width = right_side - left_side
	else
		# No part of the layover occurs today, so do not draw anything
		display_layover_airport = false
	end
	
	if display_layover_airport
		html += "<text x=\"#{(left_side + right_side) / 2}\" y=\"#{row_top(row) + @flight_bar_height / 2}\" class=\"svg_layover_text\" fill=\"hsl(#{hue},#{@saturation},#{@lightness_ff_lt})\">#{flight_1[4]}</text>\n"
	end
	html.html_safe
end

def draw_person_row(person, this_date, row_index, hue)
	prev_flight = nil
		
	concat "<text x=\"#{@image_padding + @name_width - @name_padding}\" y=\"#{row_top(row_index) + (@flight_bar_height / 2)}\" class=\"svg_person_name\">#{person[0]}</text>\n".html_safe
	
	person[1].each_with_index do |flight, flight_index|
		concat draw_flight_bar(row_index, hue, flight, this_date)
		
		# Draw layover bars if necessary:
		unless prev_flight.nil?
			concat draw_layover_bar(row_index, hue, prev_flight, flight, this_date)
		end
		prev_flight = flight
	end
	
	start_time = DateTime.parse((person[1].first)[3])
	end_time = DateTime.parse((person[1].last)[5])
	
	section_left = @name_width + @image_padding + (start_time.hour*@pixels_per_hour) + (start_time.minute*@pixels_per_hour/60) - @airport_padding
	section_right = @name_width + @image_padding + (end_time.hour*@pixels_per_hour) + (end_time.minute*@pixels_per_hour/60) + @airport_padding
	
	if Date.parse((person[1].first)[3]) == this_date
		concat "<text x=\"#{section_left}\" y=\"#{row_top(row_index) + @flight_bar_height * 0.25}\" class=\"svg_airport_label svg_airport_block_start\">#{(person[1].first)[2]}</text>\n".html_safe
		concat "<text x=\"#{section_left}\" y=\"#{row_top(row_index) + @flight_bar_height * 0.75}\" class=\"svg_time_label svg_airport_block_start\">#{DateTime.parse((person[1].first)[3]).strftime("%l:%M%P")}</text>\n".html_safe
	end
	
	if Date.parse((person[1].last)[5]) == this_date
		concat "<text x=\"#{section_right}\" y=\"#{row_top(row_index) + @flight_bar_height * 0.25}\" class=\"svg_airport_label svg_airport_block_end\">#{(person[1].last)[4]}</text>\n".html_safe
		concat "<text x=\"#{section_right}\" y=\"#{row_top(row_index) + @flight_bar_height * 0.75}\" class=\"svg_time_label svg_airport_block_end\">#{DateTime.parse((person[1].last)[5]).strftime("%l:%M%P")}</text>\n".html_safe
	end
	
end

def row_top(row_number)
	return (@chart_top + @flight_bar_spacing + (row_number * (2 * @flight_bar_spacing + @flight_bar_height)))
end

def time_label(hour)
	case hour
	when 0
		return "mdnt"
	when 1..11
		return hour.to_s + "am"
	when 12
		return "noon"
	when 13..23
		return (hour - 12).to_s + "pm"
	when 24
		return "mdnt"
	end
end	
%>

<link href='http://fonts.googleapis.com/css?family=Open+Sans:400,700' rel='stylesheet' type='text/css'>
<style>
body {font-family: 'Open Sans', sans-serif; background: hsl(0,0%,80%);}
svg {font-family: 'Open Sans', sans-serif; font-size: 12px;}

.svg_airport_block_start {text-anchor: end; alignment-baseline: central;}
.svg_airport_block_end {text-anchor: beginning; alignment-baseline: central;}
.svg_airport_label {fill: hsl(0,0%,30%); font-weight: 700;}
.svg_background {fill: hsl(0,50%,100%);}
.svg_bar {stroke-width: 1; shape-rendering: crispEdges;}
.svg_flight_text {font-size: 10px; text-anchor: middle; alignment-baseline: central;}
.svg_gridline_major {stroke-width: 1; stroke: hsl(0,0%,80%); shape-rendering: crispEdges;}
.svg_gridline_minor {stroke-width: 1; stroke: hsl(0,0%,90%); shape-rendering: crispEdges;}
.svg_layover_text {font-size: 10px; text-anchor: middle; alignment-baseline: central;}
.svg_person_name {fill: hsl(0,0%,30%);font-size: 12px; font-weight: 700; text-anchor: end; alignment-baseline: central;}
.svg_time_label {fill: hsl(0,0%,40%);font-size: 12px; font-variant: small-caps;}
.svg_time_date_label {fill: hsl(0,0%,20%); font-size: 16px; font-weight: 700; text-anchor: beginning; alignment-baseline: hanging;}
.svg_time_zone_label {fill: hsl(0,0%,50%); font-size: 12px; font-weight: 700;}
</style>

<% draw_charts %>