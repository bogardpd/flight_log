<h1>Creating Paul Bogard's Flight Log</h1>

<p class="center large"><%= link_to "Visit the Flight Log", flightlog_path %></p>

<p>In 2009, I was promoted to a job with frequent travel. Soon thereafter, I started keeping track of all the places I'd been.</p>

<h2>The (Not So) Good Old Days</h2>

<p>My first attempt at keeping track of my travel was to create a simple heat map of the United States, with each state colored depending on how recently I'd visited.</p>

<%= photo_gallery_image("flight_log/Heat-Map.png", "Map of the United States with each state colored depending on how recently it's been visited", false) %>
<div class="caption"></div>

<p>I kept track of the date of the most recent visit to each state in an Excel spreadsheet, and wrote a function to give me an RGB color based on today's date and the date of the last visit. I would then manually recolor the states using an image editor. This worked, but it was labor intensive - every time I took a trip, I would have to recolor dozens of states.<p>

<p>I began to search for software that would generate a colored map of the states from an array of state colors. Before I found any, though, I discovered the <%= link_to "Great Circle Mapper", 'http://gcmap.com/' %>.</p>

<%= gcmap_embed("ind-sea,sea-ind,ord-cle-jfk,lga-mke,mke-atl-day,day-stl-dfw,dfw-day,day-clt,clt-day,day-dfw,dfw-day,day-stl,stl-atl-phf,phf-clt-day,day-dfw,dfw-day,cmh-dfw-sjc,sfo-dfw,dfw-day,day-dfw,dfw-day,cmh-ord-fra,fra-ord-cmh,day-dfw,dfw-day,day-dfw,dfw-day,cvg-clt-sav,sav-clt-cvg,day-dfw,dfw-day,day-atl-mco,mco-atl-day,day-clt,clt-day,day-dfw,dfw-day,day-dfw-slc,slc-dfw-day,cmh-dfw-fra,fra-dfw-cmh,cmh-ord-las,las-dfw-cmh,day-dfw,dfw-day,day-ord-dfw,dfw-day,day-dfw-slc,slc-dfw-day,day-dfw,dfw-day,cvg-dfw-phx,phx-ord-cvg,day-ord-sea,sea-ord-day,day-iad,iad-day,day-iad,iad-day,ind-iad,iad-ind,day-atl-mco,mco-bwi-day") %>

<p>The Great Circle mapper allows the user to put in a string of airport pairs, and generates a map of <%= link_to "great circle", 'http://en.wikipedia.org/wiki/Great_circle' %> routes. (For example, <span class="code">DAY-DFW-PHX,PHX-ORD-DAY</span> generates <%= link_to "this map", 'http://www.gcmap.com/mapui?P=DAY-DFW-PHX,PHX-ORD-DAY' %>.) Tracking flights was more interesting to me than tracking states, so I went back through my travel receipts, wrote up a string of all of my flights, and saved it in a text file. Updating was relatively simple; I just had to type some more text at the end of my text file and copy and paste it into the Great Circle Mapper.</p>

<p>It worked for a while, but things gradually got more complicated. The Great Circle Mapper normally automatically zooms the map to include all of the airports in the user's flight string. Most of my flights were in the <%= link_to "contiguous United States", 'http://en.wikipedia.org/wiki/Contiguous_United_States' %>, but a few flights to Europe forced the map to be zoomed out, which made the US map difficult to see as I filled in more of the map with flights.  Fortunately, the Great Circle Mapper allows the user to designate that the map should ignore a particular flight when figuring out its zoom by prepending it with <span class="code">o:noext,</span>. (For example, <span class="code">CMH-ORD,o:noext,ORD-FRA,o:noext,FRA-EWR,EWR-CMH</span> generates <%= link_to "this map", 'http://www.gcmap.com/mapui?P=CMH-ORD,o:noext,ORD-FRA,o:noext,FRA-EWR,EWR-CMH' %>.) This let me flag all flights that left the continental US so that the map would remain focused on the US, and I could see the details of all those routes. But I also wanted to be able to see my world flights, so I ended up having to maintain two text files &mdash; one for within the continental US, and one for the world.</p>

<%= photo_gallery_image("flight_log/Routes-Text.png", "Screenshot of text file containing flight routes", false) %>

<%= gcmap_embed("ind-sea,sea-ind,ord-cle-jfk,lga-mke,mke-atl-day,day-stl-dfw,dfw-day,day-clt,clt-day,day-dfw,dfw-day,day-stl,stl-atl-phf,phf-clt-day,day-dfw,dfw-day,cmh-dfw-sjc,sfo-dfw,dfw-day,day-dfw,dfw-day,o:noext,cmh-ord-fra,o:noext,fra-ord-cmh,day-dfw,dfw-day,day-dfw,dfw-day,cvg-clt-sav,sav-clt-cvg,day-dfw,dfw-day,day-atl-mco,mco-atl-day,day-clt,clt-day,day-dfw,dfw-day,day-dfw-slc,slc-dfw-day,o:noext,cmh-dfw-fra,o:noext,fra-dfw-cmh,cmh-ord-las,las-dfw-cmh,day-dfw,dfw-day,day-ord-dfw,dfw-day,day-dfw-slc,slc-dfw-day,day-dfw,dfw-day,cvg-dfw-phx,phx-ord-cvg,day-ord-sea,sea-ord-day,day-iad,iad-day,day-iad,iad-day,ind-iad,iad-ind,day-atl-mco,mco-bwi-day,day-dfw-abi,abi-dfw-day,cmh-dfw,dfw-cmh,cvg-dfw,dfw-cvg,ind-dfw-abi,abi-dfw-ind,day-ord-avp,avp-ord-day,day-atl-mco,mco-bwi-day,day-dfw-abi,abi-dfw-day,tol-ord-dca,dca-ord-tol,day-dfw-abi,abi-dfw-day,cmh-dfw-slc,slc-dfw-cmh,day-ord-sea,sea-dfw-day,day-dfw,dfw-day,day-ord-dfw,dfw-day,day-ord-lax,o:noext,lax-hnl,o:noext,hnl-lax,lax-dfw-day,day-iad-chs,chs-clt-day,day-ord-okc,okc-dfw-day,day-phl-chs,chs-ord-day,day-clt-mco,mco-bwi-day,day-atl-sav,sav-ewr-day,day-dfw-phx,phx-dfw-day,day-ewr-chs,chs-iad-day,day-ord-dfw-abi,abi-dfw-ord-day,day-ord-chs,chs-ord-day") %>

<p>Then, in 2012, I started tracking the aircraft type, <%= link_to "tail number", 'http://en.wikipedia.org/wiki/Aircraft_registration' %>, and what class I sat in for all of my flights, and the data got more complicated. Now, a simple pair of text files was no longer good enough; I also had to keep a spreadsheet of all of the extra information about my flights. For good measure, I went back through my travel receipts again to get the past three years of aircraft type data.</p>

<%= photo_gallery_image("flight_log/Flight-Log-Excel.png", "Screenshot of Excel spreadsheet containing flight data", false) %>

<p>All this extra data let me do some fancy things, like make maps of all my trips on a particular airline or type of airplane, but it was a lot of extra work. I'd have to use filters in Excel, type up the routes and put them in the Great Circle Mapper, all to get a series of maps that would only be good until I took my next flight. I had a lot of data to manage.</p>

<p>At the same time, I'd been teaching myself Ruby on Rails by rewriting my old PHP website. Static pages weren't particularly difficult to write, so I needed something more complex to work on.</p>

<p>Just as I'd used my <%= link_to "EBDB", ebdb_path %> project to teach myself PHP and MySQL back in 2004, I decided to create a flight log database website to teach myself Ruby on Rails.</p>
  
<h2>Planning the Flight Log</h2>

<p>In potentially the most appropriate place to do so, I started a functional specification while on a cross-country flight.</p>

<%= download_link "Flight Log Functional Specification.pdf", 'files/flight_log/Flight Log Functional Specification.pdf' %>

<p>A major goal for the spec was to create a document detailed enough that I could hand it off to another programmer, and they'd be able to create the flight log for me. While I fully intended to code the site myself, writing the spec to this level was still good practice &mdash; it forced me to decide what I wanted early in the process, avoiding a lot of programming rework later.</p>

<h2>Designing Model Classes</h2>

<p>The purpose of the functional spec was to describe what I wanted to model. Thus, most of the nouns were either things I wanted to model (classes) or attributes of those things, and most of the verbs were actions related to those things (methods). The tricky part was deciding which nouns were classes or attributes, and which methods went with which classes. To make this easier, I created a physical representation of my spec – I printed out the spec and read through the entirety of it, writing down all significant nouns and verbs on post-it notes as I went along.</p>

<%= photo_gallery_image("flight_log/Writing-Notes-Preview.jpg", "Photo of a table with a number of post-it notes covering it.") %>

<p>Doing this allowed me to visually arrange the nouns and verbs into classes, attributes, and methods. I found a large, flat surface (a wall in my home) and came up with a first draft.  (Some notes were redundant and were discarded; in a few places, I needed to write new notes for a method that was needed by multiple classes, like Add, Edit, and Delete.)</p>

<%= photo_gallery_image("flight_log/Arranging-Notes-Preview.jpg", "Photo of a wall with a number of post-it notes covering it.") %>

<p>A number of the nouns ended up being user interface elements; for the most part, they were things already provided by HTML or Ruby on Rails (tables, forms, etc). They would have to be tested later, but they were not likely to drive new classes or methods, so I set them aside. This left six candidates for classes:</p>

<ul>
  <li>User</li>
  <li>Airline</li>
  <li>Flight</li>
  <li>Aircraft</li>
  <li>Airport</li>
  <li>Trip</li>
</ul>

<p>The <strong>User</strong> class largely dealt with whether or not a site visitor was logged in.  However, I already had this functionality on this website, which the flight log was able to use, so there was no need to write a separate User class for the flight log.</p>

<p><strong>Flight</strong> was by far my largest class, which was logical, considering that my travel was a collection of flights. There was not much argument against leaving this as its own class.</p>

<p><strong>Airline</strong> only had one attribute – the icon associated with it. It would be trivial to write a function to generate a unique icon filename from the airline name, so there was not much sense in making Airline a separate class. Instead, I made Airline an attribute of Flight and moved its methods over to Flight.</p>

<p><strong>Aircraft</strong> was a bit larger than Airline, but it was still not a tremendously complicated class, and was also a candidate for merging into Flight.  The only reason I cared about tracking a unique aircraft is for the purpose of the All Tail Numbers and Show Tail Number view, and these views were both closely tied to Flight (how many flights has each tail number been on and which flights have a particular tail number been on, respectively).  So I accomplished what I wanted by simply having tail number be an attribute of Flight. Likewise, aircraft family and variant potentially made sense as attributes of Flight.</p>

<p>Merging Aircraft into Flight would potentially cause some duplication of data (if I fly on the same tail number multiple times, I’ll be recording the same aircraft family and aircraft variant in multiple rows of the flight table). However, it hasn’t always been possible to determine the tail number of the aircraft I’m riding, and prior to 2012 I didn’t even try to track it. Because there are a large number of flights where I don’t know the tail number, aircraft family, or both, there are a large number of aircraft that I can’t be sure are unique.  For this reason, I ultimately decided that I’d merge Aircraft into Flight, and accept any potential duplication of aircraft family and aircraft variant data.</p>

<p>The <strong>Airport</strong> class, however, could not be effectively merged.  Any given airport was likely to be used many times, so keeping track of the airport name and CONUS airport status in the flight table would have been an enormous replication of data, particularly given that each flight had two airports associated with it.</p>

<p>As the majority of trips will have more than one flight, I chose to leave <strong>Trip</strong> as its own class.</p>

<p class="note">Note: This page documents the original flight log design process. The design has subsequently had several updates. For the most up-to-date design details, see the <%= link_to("Current Specs section", :anchor => 'current_specs') %> at the bottom of this page.</p>

<p>This left me with three model classes remaining:</p>

<ul>
  <li>Flight</li>
  <li>Airport</li>
  <li>Trip</li>
</ul>

<p>The majority of the methods ended up being redundant, as Rails's ActiveRecord provided most of that functionality. I ended up with the following class diagram:</p>

<%= photo_gallery_image("flight_log/Class-Diagram.png", "Class diagram. ActiveRecord is at the top, with Flight, Airport, and Trip inheriting from it. Flight has the attributes id, origin_airport_id, destination_airport_id, trip_id, trip_section, departure_date, departure_utc, airline, flight_number, aircraft_family, aircraft_variant, tail_number, travel_class, and comment. Flight has the method airline_icon_path. Airport has the attributes id, iata_code, city, and region_conus. Airport has no methods. Trip has the attributes id, name, hidden, and comment. Trip has no methods.", false) %>

<p>Each trip could have one or many flights, but each flight would only belong to a single trip. Each airport has a single origin airport and a single destination airport, which are usually (but not always) different. However, each airport could serve as the origin or destination of many flights. Given this, the following entity relationships made sense:</p>

<%= photo_gallery_image("flight_log/Entity-Relationships.png", "Entity relationships diagram. One trip consists of many flights. Many flights depart from one airport. Many flights arrive at one airport.", false) %>

<p>To make sure that these relationships would actually work, I made a prototype database in Microsoft Access. (Yes, <em>Access</em>. I already had it available, I wasn't going to use it for production, and it was relatively easy to populate with data from my Excel spreadsheet of flights.)</p>

<%= photo_gallery_image("flight_log/Access-Prototype.png", "Screenshot of Microsoft Access", false) %>
  
<p>This let me create an SQL query for every view I had in the functional specification, to test that I could actually extract the data I needed with the above database table relationships. This SQL, of course, was only a proof of concept &mdash; for the actual site, I intended to use ActiveRecord as much as possible.</p>

<p>My proof of concept was successful, so I wrote up a technical specification:</p>

<%= download_link "Flight Log Technical Specification.pdf", 'files/flight_log/Flight Log Technical Specification.pdf' %>

<p>Effectively, the functional specification documented <em>what</em> I wanted to do, and the technical specification documented <em>how</em> I was going to do it.</p>

<h2>Programming</h2>

<p>With the specifications completed, programming was relatively painless.</p>

<ul>
  <li>I used <%= link_to("Trello", 'https://trello.com/' )%> to manage my project; it worked very well for keeping track of what tasks I needed to complete (with associated notes and checklists) and what bugs I needed to fix.</li>
  <li>I used <%= link_to("git", 'http://git-scm.com/') %> for revision control. (See the <%= link_to("GitHub repository", 'https://github.com/bogardpd/portfolio') %> for this site.)</li>
</ul>

<h2>Completed Flight Log</h2>

<p class="center large"><%= link_to "Paul Bogard's Flight Log", flightlog_path %></p>

<h2>Credits</h2>

<ul>
  <li>Thanks to <strong>Dan Bogard</strong> for reviewing the specifications.</li>
  <li>Thanks to <strong>Amy Dobyns</strong> for helping with beta testing and data entry.</li>
</ul>

<h2>Changes</h2>

<ul>
  <li><%= link_to("Version 1.1", 'http://blog.pbogard.com/2013/10/24/flight-log-version-1-1-routes-top-5-lists-and-more/')%>: Routes and Top 5 Lists</li>
	<li><%= link_to("Version 1.2", 'http://blog.pbogard.com/2014/10/29/flight-log-version-1-2-operators-and-codeshares')%>: Operators and Codeshares</li>
	<li><%= link_to("Version 1.3", 'http://blog.pbogard.com/2015/02/14/flight-log-version-1-3-distances-and-annual-summaries/')%>: Distances and Annual Summaries</li>
</ul>

<a name="current_specs"></a>
<h2>Current Specs (Including All Changes)</h2>

<%= download_link "Flight Log Functional Specification.pdf", 'files/flight_log/1.3/Flight Log Functional Specification.pdf' %>
<%= download_link "Flight Log Technical Specification.pdf", 'files/flight_log/1.3/Flight Log Technical Specification.pdf' %>