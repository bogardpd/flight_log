<% gcmap_attr = map.gcmap %>
<% mapboxgl_attr = map.mapboxgl %>
<% map_id = mapboxgl_attr[:id] %>
<% provide(:og_image, gcmap_attr[:img_path]) unless content_for(:og_image) %>
<div class="map-gcmap <%= gcmap_attr[:map_type] %>" id="<%= gcmap_attr[:id] %>">
  <div class="map-mapbox" id="mapbox_<%= map_id %>"></div>
  <% if local_assigns[:region] %>
    <%= gcmap_region_select_links(map, region, anchor: gcmap_attr[:id]) %>
  <% end %>
  <%= link_to(image_tag(gcmap_attr[:img_path], alt: gcmap_attr[:description], class: "map"), gcmap_attr[:link_path], target: :_blank) %>
  <div class="map-info credit">
    <div>
      Map generated by <%= link_to("Great Circle Mapper", "http://www.gcmap.com/", target: "_blank") %>
    </div>
    <div>
      <%= link_to("GPX", params.permit!.merge(map_id: gcmap_attr[:id], extension: :gpx), download: "#{gcmap_attr[:id]}.gpx") %>
      &middot; 
      <%= link_to("KML", params.permit!.merge(map_id: gcmap_attr[:id], extension: :kml), download: "#{gcmap_attr[:id]}.kml") %>
      &middot; 
      <%= link_to("GeoJSON", params.permit!.merge(map_id: gcmap_attr[:id], extension: :geojson), download: "#{gcmap_attr[:id]}.geojson") %>
    </div>
  </div>
  <% if local_assigns[:distance] %>
    <div class="map-metrics">
      <span class="distance-mi">
        <%= NumberFormat.value(distance[:miles]) %> <%= [distance[:adjective],"mile"].compact.join(" ").pluralize(distance[:miles]) %>
      </span>
      &middot;
      <span class="distance-km">
        <%= NumberFormat.value(Distance::km(distance[:miles])) %> km
      </span>
      <% if local_assigns[:flight_link] %>
        <% flights_path = flight_link[:path] || "#flights" %>
        &middot;
        <% if flight_link[:total] %>
          <%= link_to(safe_join(["See all", content_tag(:span, pluralize(flight_link[:total], "flight"), class: "summary-total", "data-total": flight_link[:total])], " "), flights_path) %>
        <% else %>
          <%= link_to("See a list of these flights", flights_path) %>
        <% end %>
      <% end %>
    </div>
  <% end %>
</div>

<% unless Rails.env.test? # Integration tests inconsistently fail if trying to have javascript load map data %>
<script>
  mapboxgl.accessToken = '<%= Rails.env.development? ? Rails.application.credentials[:mapbox][:api_key][:unrestricted] : Rails.application.credentials[:mapbox][:api_key][:flight_historian] %>';
  const map_type_<%= map_id %> = '<%= mapboxgl_attr[:map_type] %>';
  const map_<%= map_id %> = new mapboxgl.Map({
    container: 'mapbox_<%= map_id %>',
    style: 'mapbox://styles/bogardpd/cly0gib62008301p82kk64np1', // Light Terrain - Flight Historian
    center: [0, 20],
    zoom: 0.5,
  });

  map_<%= map_id %>.on('load', () => {
     // Load data.
     map_<%= map_id %>.addSource('flights', {
      'type': 'geojson',
      'data': '<%= url_for(params.permit!.merge(map_id: mapboxgl_attr[:id], extension: :geojson)) %>',
      'generateId': true,
    })

    // Add routes.
    map_<%= map_id %>.addLayer({
      'id': 'routes',
      'type': 'line',
      'source': 'flights',
      'filter': ['==', '$type', 'LineString'],
      'paint': {
        'line-width': [
          "interpolate", ["linear"], ["zoom"],
          4, 1.5,  // zoom <=  4: width 1.5
          20, 5.0, // zoom >= 20: width 5.0
        ],
        'line-color': '#0077bb',
        'line-opacity': 0.8,
      }
    });

    // Add airports.
    map_<%= map_id %>.addLayer({
      'id': 'airports',
      'type': 'circle',
      'source': 'flights',
      'filter': ['==', '$type', 'Point'],
      'paint': {
        'circle-radius': {
          'property': 'Highlighted',
          'type': 'categorical',
          'stops': [
            [{'zoom':  4, 'value': true }, 4],
            [{'zoom':  4, 'value': false}, 3],
            [{'zoom': 20, 'value': true }, 24],
            [{'zoom': 20, 'value': false}, 12],
          ],
        },
        'circle-color': '#000000',
      }
    });

    var label_minzoom = (map_type_<%= map_id %> == 'single-flight-map') ? 0 : 3;

    // Add labels.
    map_<%= map_id %>.addLayer({
      'id': 'airport-labels',
      'type': 'symbol',
      'source': 'flights',
      'filter': ['==', '$type', 'Point'],
      'minzoom': label_minzoom,
      'layout': {
        'text-field': ['get', 'AirportIATA'],
        'text-variable-anchor': ['bottom','top','left','right'],
        'text-radial-offset': {
          'property': 'Highlighted',
          'type': 'categorical',
          'stops': [
            [{'zoom':  4, 'value': true }, 0.3],
            [{'zoom':  4, 'value': false}, 0.3],
            [{'zoom': 20, 'value': true }, 1.8],
            [{'zoom': 20, 'value': false}, 1.2],
          ],
        },
        'text-font': [
          'case',
          ['get', 'Highlighted'],
          ['literal', ['Source Sans Pro Semibold', 'DIN Pro Bold', 'Arial Unicode MS Bold']],
          ['literal', ['Source Sans Pro Regular', 'DIN Pro Regular', 'Arial Unicode MS Regular']],
        ],
        'text-size': ['case', ['get', 'Highlighted'], 15, 13],
        'symbol-sort-key': ['case', ['get', 'Highlighted'], 0, 1], // Lower value is higher priority
      },
      'paint': {
        'text-color': '#000000',
        'text-halo-color': '#ffffff',
        'text-halo-width': 1.5,
        'text-halo-blur': 2,
      },
    });

  });
</script>
<% end %>