#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.8
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'nokogiri/css/parser_extras'
module Nokogiri
  module CSS
    class Parser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
     6,    62,     7,    63,    14,    19,    23,    26,    20,     2,
    71,    14,     6,    63,    85,    17,    14,    22,    25,    28,
    83,     2,     7,    72,    11,    13,    15,   -26,    20,     7,
    49,    28,    13,    70,     7,    20,    11,    13,    15,     6,
    20,    64,    65,    14,    19,    23,    26,    64,     2,    36,
    59,     6,    60,    67,    17,    14,    22,    25,    28,    90,
     2,     7,     6,    11,    13,    15,    14,    20,    66,    67,
    28,     2,    91,     7,    14,    11,    13,    15,    14,    20,
    69,    28,     6,     2,     7,    68,    11,    13,    15,    14,
    20,    37,     7,    39,    94,    13,     7,    14,    20,    13,
    15,    28,    20,     6,    49,    14,    11,     7,    36,    59,
    13,    60,    53,    20,    14,     7,    36,    59,    13,    60,
    95,    20,    28,     7,   101,   100,    13,    11,    49,    20,
    74,    76,     7,    36,    31,    13,    33,    50,    20,    74,
    76,    75,    77,    79,    98,    80,    32,    99,    42,    73,
    75,    77,    79,   102,    80,    19,    23,    26,    73,    36,
    59,   -26,    60,   104,   105,    17,   nil,    22,    25 ]

racc_action_check = [
     0,    29,    21,    45,     0,     0,     0,     0,    21,     0,
    38,    24,    63,    29,    45,     0,    63,     0,     0,     0,
    42,    63,     0,    39,     0,     0,     0,    37,     0,    24,
    47,    63,    24,    36,    63,    24,    63,    63,    63,    11,
    63,    59,    31,    11,    11,    11,    11,    31,    11,    70,
    70,     9,    70,    60,    11,     9,    11,    11,    11,    61,
     9,    11,    44,    11,    11,    11,    44,    11,    33,    33,
     9,    44,    62,     9,    87,     9,     9,     9,    49,     9,
    35,    44,     7,    49,    44,    34,    44,    44,    44,    12,
    44,     7,    87,     7,    65,    87,    49,    27,    87,    49,
    49,     7,    49,    20,    12,    18,     7,    12,    64,    64,
    12,    64,    20,    12,     1,    27,    28,    28,    27,    28,
    66,    27,    20,    18,    81,    81,    18,    20,    16,    18,
    41,    41,     1,     6,     6,     1,     6,    13,     1,    40,
    40,    41,    41,    41,    71,    41,     6,    78,     8,    41,
    40,    40,    40,    82,    40,    10,    10,    10,    40,    67,
    67,     2,    67,    89,    95,    10,   nil,    10,    10 ]

racc_action_pointer = [
    -2,   108,   132,   nil,   nil,   nil,   123,    80,   119,    49,
   148,    37,    83,   126,   nil,   nil,   107,   nil,    99,   nil,
   101,   -22,   nil,   nil,     5,   nil,   nil,    91,   106,     1,
   nil,    35,   nil,    57,    62,    57,    21,    -2,   -19,    -2,
   136,   127,     9,   nil,    60,    -9,   nil,     9,   nil,    72,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    29,
    41,    36,    72,    10,    98,    81,   113,   149,   nil,   nil,
    39,   133,   nil,   nil,   nil,   nil,   nil,   nil,   122,   nil,
   nil,   114,   128,   nil,   nil,   nil,   nil,    68,   nil,   140,
   nil,   nil,   nil,   nil,   nil,   151,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
   -27,   -56,   -25,    -3,   -22,    -2,   -74,   -27,   -74,   -27,
   -20,   -27,   -50,   -74,   -59,   -23,   -17,    -6,   -55,    -4,
   -74,   -13,    -9,    -5,   -58,    -8,    -7,   -57,   -74,   -74,
   -52,   -43,   -33,   -41,   -74,   -74,   -42,   -32,   -74,   -74,
   -62,   -62,   -74,   -18,   -27,   -74,   -10,   -49,   -12,   -27,
   -21,   -16,   -51,   -48,   -47,   -14,   -15,   -54,   -53,   -43,
   -41,   -74,   -74,   -27,   -74,   -74,   -46,   -74,   -34,   -35,
   -74,   -74,   -30,   -63,   -68,   -64,   -69,   -65,   -74,   -66,
   -67,   -74,   -74,   -24,   -19,   -37,   -11,   -71,   -73,   -74,
   -36,   106,    -1,   -40,   -45,   -74,   -38,   -39,   -31,   -28,
   -60,   -61,   -29,   -72,   -70,   -44 ]

racc_goto_table = [
    30,    43,    34,    48,    29,    41,    55,    51,    78,    82,
    46,    47,    56,    38,    40,    45,    87,    52,    54,    44,
    35,    89,   nil,    57,    61,   nil,    58,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    84,   nil,    86,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    88,   nil,
   nil,   nil,   nil,   nil,   nil,    92,   nil,   nil,   nil,   nil,
    93,   nil,   nil,    96,   nil,   nil,    97,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   103 ]

racc_goto_check = [
     8,     2,    18,     9,     1,    10,    11,     9,    17,    17,
     7,     8,    12,    15,    16,     1,     6,     8,    10,     4,
    19,    22,   nil,     8,    18,   nil,     8,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,     9,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     8,   nil,
   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,
    18,   nil,   nil,    18,   nil,   nil,    18,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     8 ]

racc_goto_pointer = [
   nil,     4,    -8,   nil,     9,   nil,   -33,    -2,    -1,    -9,
    -2,   -15,    -9,   nil,   nil,     6,     7,   -32,    -4,    14,
   nil,   nil,   -28 ]

racc_goto_default = [
   nil,   nil,     3,     5,     9,    10,    12,   nil,    16,   nil,
    21,    24,    27,     1,     4,     8,   nil,   nil,   nil,   nil,
    18,    81,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 32, :_reduce_1,
  1, 32, :_reduce_2,
  1, 32, :_reduce_3,
  1, 35, :_reduce_4,
  1, 35, :_reduce_5,
  1, 35, :_reduce_6,
  1, 35, :_reduce_7,
  1, 35, :_reduce_8,
  1, 35, :_reduce_9,
  2, 36, :_reduce_10,
  3, 36, :_reduce_11,
  2, 36, :_reduce_12,
  1, 36, :_reduce_none,
  2, 36, :_reduce_14,
  2, 36, :_reduce_15,
  2, 36, :_reduce_16,
  1, 36, :_reduce_17,
  2, 34, :_reduce_18,
  3, 33, :_reduce_19,
  1, 33, :_reduce_none,
  2, 44, :_reduce_21,
  1, 37, :_reduce_none,
  1, 37, :_reduce_23,
  3, 45, :_reduce_24,
  1, 45, :_reduce_25,
  1, 46, :_reduce_26,
  0, 46, :_reduce_none,
  4, 43, :_reduce_28,
  4, 43, :_reduce_29,
  3, 43, :_reduce_30,
  3, 47, :_reduce_31,
  1, 47, :_reduce_32,
  2, 41, :_reduce_33,
  3, 41, :_reduce_34,
  3, 41, :_reduce_35,
  3, 41, :_reduce_36,
  3, 41, :_reduce_37,
  3, 49, :_reduce_38,
  3, 49, :_reduce_39,
  3, 49, :_reduce_40,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_43,
  4, 50, :_reduce_44,
  3, 50, :_reduce_45,
  2, 50, :_reduce_46,
  2, 42, :_reduce_47,
  2, 42, :_reduce_48,
  1, 38, :_reduce_none,
  0, 38, :_reduce_none,
  2, 39, :_reduce_51,
  2, 39, :_reduce_52,
  2, 39, :_reduce_53,
  2, 39, :_reduce_54,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 51, :_reduce_59,
  2, 48, :_reduce_60,
  2, 48, :_reduce_61,
  0, 48, :_reduce_none,
  1, 52, :_reduce_63,
  1, 52, :_reduce_64,
  1, 52, :_reduce_65,
  1, 52, :_reduce_66,
  1, 52, :_reduce_67,
  1, 52, :_reduce_68,
  1, 52, :_reduce_69,
  3, 40, :_reduce_70,
  1, 53, :_reduce_none,
  2, 53, :_reduce_none,
  1, 53, :_reduce_none ]

racc_reduce_n = 74

racc_shift_n = 106

racc_token_table = {
  false => 0,
  :error => 1,
  :FUNCTION => 2,
  :INCLUDES => 3,
  :DASHMATCH => 4,
  :LBRACE => 5,
  :HASH => 6,
  :PLUS => 7,
  :GREATER => 8,
  :S => 9,
  :STRING => 10,
  :IDENT => 11,
  :COMMA => 12,
  :NUMBER => 13,
  :PREFIXMATCH => 14,
  :SUFFIXMATCH => 15,
  :SUBSTRINGMATCH => 16,
  :TILDE => 17,
  :NOT_EQUAL => 18,
  :SLASH => 19,
  :DOUBLESLASH => 20,
  :NOT => 21,
  :EQUAL => 22,
  :RPAREN => 23,
  :LSQUARE => 24,
  :RSQUARE => 25,
  :HAS => 26,
  "." => 27,
  "*" => 28,
  "|" => 29,
  ":" => 30 }

racc_nt_base = 31

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "FUNCTION",
  "INCLUDES",
  "DASHMATCH",
  "LBRACE",
  "HASH",
  "PLUS",
  "GREATER",
  "S",
  "STRING",
  "IDENT",
  "COMMA",
  "NUMBER",
  "PREFIXMATCH",
  "SUFFIXMATCH",
  "SUBSTRINGMATCH",
  "TILDE",
  "NOT_EQUAL",
  "SLASH",
  "DOUBLESLASH",
  "NOT",
  "EQUAL",
  "RPAREN",
  "LSQUARE",
  "RSQUARE",
  "HAS",
  "\".\"",
  "\"*\"",
  "\"|\"",
  "\":\"",
  "$start",
  "selector",
  "simple_selector_1toN",
  "prefixless_combinator_selector",
  "combinator",
  "simple_selector",
  "element_name",
  "hcap_0toN",
  "hcap_1toN",
  "negation",
  "function",
  "pseudo",
  "attrib",
  "class",
  "namespaced_ident",
  "namespace",
  "attrib_name",
  "attrib_val_0or1",
  "expr",
  "an_plus_b",
  "attribute_id",
  "eql_incl_dash",
  "negation_arg" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
        result = [val.first, val.last].flatten
      
    result
end

def _reduce_2(val, _values, result)
 result = val.flatten 
    result
end

def _reduce_3(val, _values, result)
 result = val.flatten 
    result
end

def _reduce_4(val, _values, result)
 result = :DIRECT_ADJACENT_SELECTOR 
    result
end

def _reduce_5(val, _values, result)
 result = :CHILD_SELECTOR 
    result
end

def _reduce_6(val, _values, result)
 result = :FOLLOWING_SELECTOR 
    result
end

def _reduce_7(val, _values, result)
 result = :DESCENDANT_SELECTOR 
    result
end

def _reduce_8(val, _values, result)
 result = :DESCENDANT_SELECTOR 
    result
end

def _reduce_9(val, _values, result)
 result = :CHILD_SELECTOR 
    result
end

def _reduce_10(val, _values, result)
        result =  if val[1].nil?
                    val.first
                  else
                    Node.new(:CONDITIONAL_SELECTOR, [val.first, val[1]])
                  end
      
    result
end

def _reduce_11(val, _values, result)
        result = Node.new(:CONDITIONAL_SELECTOR,
          [
            val.first,
            Node.new(:COMBINATOR, [val[1], val.last])
          ]
        )
      
    result
end

def _reduce_12(val, _values, result)
        result = Node.new(:CONDITIONAL_SELECTOR, val)
      
    result
end

# reduce 13 omitted

def _reduce_14(val, _values, result)
        result = Node.new(:CONDITIONAL_SELECTOR, val)
      
    result
end

def _reduce_15(val, _values, result)
        result = Node.new(:CONDITIONAL_SELECTOR, val)
      
    result
end

def _reduce_16(val, _values, result)
        result = Node.new(:CONDITIONAL_SELECTOR,
          [
            Node.new(:ELEMENT_NAME, ['*']),
            Node.new(:COMBINATOR, val)
          ]
        )
      
    result
end

def _reduce_17(val, _values, result)
        result = Node.new(:CONDITIONAL_SELECTOR,
          [Node.new(:ELEMENT_NAME, ['*']), val.first]
        )
      
    result
end

def _reduce_18(val, _values, result)
        result = Node.new(val.first, [nil, val.last])
      
    result
end

def _reduce_19(val, _values, result)
        result = Node.new(val[1], [val.first, val.last])
      
    result
end

# reduce 20 omitted

def _reduce_21(val, _values, result)
 result = Node.new(:CLASS_CONDITION, [val[1]]) 
    result
end

# reduce 22 omitted

def _reduce_23(val, _values, result)
 result = Node.new(:ELEMENT_NAME, val) 
    result
end

def _reduce_24(val, _values, result)
        result = Node.new(:ELEMENT_NAME,
          [[val.first, val.last].compact.join(':')]
        )
      
    result
end

def _reduce_25(val, _values, result)
        name = @namespaces.key?('xmlns') ? "xmlns:#{val.first}" : val.first
        result = Node.new(:ELEMENT_NAME, [name])
      
    result
end

def _reduce_26(val, _values, result)
 result = val[0] 
    result
end

# reduce 27 omitted

def _reduce_28(val, _values, result)
        result = Node.new(:ATTRIBUTE_CONDITION,
          [val[1]] + (val[2] || [])
        )
      
    result
end

def _reduce_29(val, _values, result)
        result = Node.new(:ATTRIBUTE_CONDITION,
          [val[1]] + (val[2] || [])
        )
      
    result
end

def _reduce_30(val, _values, result)
        # Non standard, but hpricot supports it.
        result = Node.new(:PSEUDO_CLASS,
          [Node.new(:FUNCTION, ['nth-child(', val[1]])]
        )
      
    result
end

def _reduce_31(val, _values, result)
        result = Node.new(:ELEMENT_NAME,
          [[val.first, val.last].compact.join(':')]
        )
      
    result
end

def _reduce_32(val, _values, result)
        # Default namespace is not applied to attributes.
        # So we don't add prefix "xmlns:" as in namespaced_ident.
        result = Node.new(:ELEMENT_NAME, [val.first])
      
    result
end

def _reduce_33(val, _values, result)
        result = Node.new(:FUNCTION, [val.first.strip])
      
    result
end

def _reduce_34(val, _values, result)
        result = Node.new(:FUNCTION, [val.first.strip, val[1]].flatten)
      
    result
end

def _reduce_35(val, _values, result)
        result = Node.new(:FUNCTION, [val.first.strip, val[1]].flatten)
      
    result
end

def _reduce_36(val, _values, result)
        result = Node.new(:FUNCTION, [val.first.strip, val[1]].flatten)
      
    result
end

def _reduce_37(val, _values, result)
        result = Node.new(:FUNCTION, [val.first.strip, val[1]].flatten)
      
    result
end

def _reduce_38(val, _values, result)
 result = [val.first, val.last] 
    result
end

def _reduce_39(val, _values, result)
 result = [val.first, val.last] 
    result
end

def _reduce_40(val, _values, result)
 result = [val.first, val.last] 
    result
end

# reduce 41 omitted

# reduce 42 omitted

def _reduce_43(val, _values, result)
        if val[0] == 'even'
          val = ["2","n","+","0"]
          result = Node.new(:AN_PLUS_B, val)
        elsif val[0] == 'odd'
          val = ["2","n","+","1"]
          result = Node.new(:AN_PLUS_B, val)
        else
          # This is not CSS standard.  It allows us to support this:
          # assert_xpath("//a[foo(., @href)]", @parser.parse('a:foo(@href)'))
          # assert_xpath("//a[foo(., @a, b)]", @parser.parse('a:foo(@a, b)'))
          # assert_xpath("//a[foo(., a, 10)]", @parser.parse('a:foo(a, 10)'))
          result = val
        end
      
    result
end

def _reduce_44(val, _values, result)
        if val[1] == 'n'
          result = Node.new(:AN_PLUS_B, val)
        else
          raise Racc::ParseError, "parse error on IDENT '#{val[1]}'"
        end
      
    result
end

def _reduce_45(val, _values, result)
               # n+3, -n+3
        if val[0] == 'n'
          val.unshift("1")
          result = Node.new(:AN_PLUS_B, val)
        elsif val[0] == '-n'
          val[0] = 'n'
          val.unshift("-1")
          result = Node.new(:AN_PLUS_B, val)
        else
          raise Racc::ParseError, "parse error on IDENT '#{val[1]}'"
        end
      
    result
end

def _reduce_46(val, _values, result)
        if val[1] == 'n'
          val << "+"
          val << "0"
          result = Node.new(:AN_PLUS_B, val)
        else
          raise Racc::ParseError, "parse error on IDENT '#{val[1]}'"
        end
      
    result
end

def _reduce_47(val, _values, result)
        result = Node.new(:PSEUDO_CLASS, [val[1]])
      
    result
end

def _reduce_48(val, _values, result)
 result = Node.new(:PSEUDO_CLASS, [val[1]]) 
    result
end

# reduce 49 omitted

# reduce 50 omitted

def _reduce_51(val, _values, result)
        result = Node.new(:COMBINATOR, val)
      
    result
end

def _reduce_52(val, _values, result)
        result = Node.new(:COMBINATOR, val)
      
    result
end

def _reduce_53(val, _values, result)
        result = Node.new(:COMBINATOR, val)
      
    result
end

def _reduce_54(val, _values, result)
        result = Node.new(:COMBINATOR, val)
      
    result
end

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

def _reduce_59(val, _values, result)
 result = Node.new(:ID, val) 
    result
end

def _reduce_60(val, _values, result)
 result = [val.first, val[1]] 
    result
end

def _reduce_61(val, _values, result)
 result = [val.first, val[1]] 
    result
end

# reduce 62 omitted

def _reduce_63(val, _values, result)
 result = :equal 
    result
end

def _reduce_64(val, _values, result)
 result = :prefix_match 
    result
end

def _reduce_65(val, _values, result)
 result = :suffix_match 
    result
end

def _reduce_66(val, _values, result)
 result = :substring_match 
    result
end

def _reduce_67(val, _values, result)
 result = :not_equal 
    result
end

def _reduce_68(val, _values, result)
 result = :includes 
    result
end

def _reduce_69(val, _values, result)
 result = :dash_match 
    result
end

def _reduce_70(val, _values, result)
        result = Node.new(:NOT, [val[1]])
      
    result
end

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module CSS
  end   # module Nokogiri
